package com.rcs.common;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

/**
 * Class made specially for transporting responses from the service layer. <br
 * /> Please avoid the use of exceptions to perform this task. Exceptions are
 * meant for other purposes like for exceptional situations.
 *
 * @author juan
 */
public class ServiceActionResult<T> implements Serializable {

    private static final long serialVersionUID = 1L;
    private final boolean success;
    private final T payload;
    private final List<String> validationKeys;
    private List<String> translatedValidationKeys;

    public ServiceActionResult(boolean success, T payload, List<String> validationKeys) {
        this.success = success;
        this.payload = payload;
        this.validationKeys = validationKeys;
        this.translatedValidationKeys = new LinkedList<String>();
    }

    /**
     * Return the payload of this service action result. This is intended to aid
     * on the lack of return types.
     *
     * @return
     */
    public T getPayload() {
        return payload;
    }

    /**
     * Check if this service action result represents a successful status.
     *
     * @return
     */
    public boolean isSuccess() {
        return success;
    }

    /**
     * Get the list of validation keys generated by the service.
     *
     * @return
     */
    public List<String> getValidationKeys() {
        return validationKeys;
    }

    /**
     * Add a validation key to this service result.
     *
     * @param key
     */
    public void addValidationKey(String key) {
        validationKeys.add(key);
    }

    /**
     * Build a successful service result.
     *
     * @param <T>
     * @param payload
     * @param keys
     * @return
     */
    public static <T> ServiceActionResult<T> buildSuccess(T payload, String... keys) {

        LinkedList<String> keysList = new LinkedList<String>();
        keysList.addAll(Arrays.asList(keys));

        return new ServiceActionResult<T>(true, payload, keysList);
    }

    /**
     * Build a failure service result. This will also mark the transaction as
     * rollback only.
     *
     * @param <T>
     * @param payload
     * @param keys
     * @return
     */
    public static <T> ServiceActionResult<T> buildFailure(T payload, String... keys) {
        List<String> keysList = new LinkedList<String>();
        keysList.addAll(Arrays.asList(keys));
        return buildFailure(payload, keysList);
    }

    /**
     * Build a failure service result without rollback.
     *
     * @param <T>
     * @param payload
     * @param keys
     * @return
     */
    public static <T> ServiceActionResult<T> buildFailureWithoutRollback(T payload, String... keys) {
        List<String> keysList = new LinkedList<String>();
        keysList.addAll(Arrays.asList(keys));
        return new ServiceActionResult<T>(false, payload, keysList);
    }

    /**
     * Build a failure service result. This will also mark the transaction as
     * rollback only.
     *
     * @param <T>
     * @param payload
     * @param keys
     * @return
     */
    public static <T> ServiceActionResult<T> buildFailure(T payload, List<String> keys) {
        //rollback the transaction.
        //TransactionAspectSupport.currentTransactionStatus().isRollbackOnly();
        return new ServiceActionResult<T>(false, payload, keys);
    }

    /**
     * Add a translated validation key to this service result.
     *
     * @param value
     */
    public void addTranslatedValidationKey(String value) {
        translatedValidationKeys.add(value);
    }

    /**
     * Get the list of the translated validation keys generated by the service.
     *
     * @return
     */
    public List<String> getTranslatedValidationKeys() {
        return Collections.unmodifiableList(translatedValidationKeys);
    }
}
